package org.randomfetcher;

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Integer> sequence = Arrays.asList(
                44, 202, 100, 221, 19, 154, 127, 33, 164, 242, 222, 11, 39, 69, 252, 172, 115, 226, 203, 67, 183, 172, 169, 144, 226, 62, 248, 223, 18, 128, 104, 16, 111, 156, 61, 162, 84, 117, 24, 32, 108, 46, 180, 147, 57, 47, 35, 202, 247, 70, 165, 44, 163, 225, 147, 124, 135, 65, 250, 14, 212, 24, 208, 243, 199, 155, 8, 108, 108, 254, 68, 31, 191, 78, 177, 146, 101, 180, 219, 84, 215, 208, 194, 149, 11, 71, 15, 7, 91, 73, 188, 26, 214, 66, 114, 251, 57, 175, 49, 197, 170, 84, 221, 179, 107, 97, 76, 243, 46, 116, 28, 54, 116, 98, 235, 22, 255, 164, 123, 4, 96, 210, 120, 212, 154, 241, 254, 171, 142, 19, 20, 185, 111, 87, 203, 187, 28, 164, 188, 146, 9, 153, 20, 208, 4, 167, 121, 221, 179, 77, 102, 13, 129, 55, 11, 235, 4, 14, 43, 23, 219, 108, 207, 7, 12, 44, 129, 142, 82, 34, 180, 98, 116, 241, 127, 206, 231, 229, 252, 194, 233, 170, 17, 131, 48, 36, 216, 166, 84, 90, 143, 41, 137, 100, 233, 152, 126, 76, 125, 158, 112, 118, 221, 128, 166, 98, 40, 197, 152, 203, 92, 19, 87, 116, 36, 127, 46, 165, 210, 202, 29, 195, 58, 85, 89, 165, 153, 244, 44, 212, 94, 62, 46, 47, 89, 27, 133, 214, 110, 0, 104, 211, 103, 82, 21, 218, 53, 215, 228, 194, 246, 219, 167, 48, 195, 18, 80, 216, 151, 95, 132, 160, 49, 20, 204, 201, 42, 17, 194, 179, 208, 254, 247, 15, 119, 112, 78, 213, 234, 87, 228, 209, 67, 138, 22, 207, 142, 3, 237, 132, 241, 44, 82, 102, 205, 158, 168, 150, 74, 175, 217, 182, 114, 59, 1, 227, 10, 96, 118, 74, 216, 107, 135, 105, 147, 165, 13, 251, 22, 83, 184, 8, 103, 148, 87, 37, 196, 2, 130, 17, 247, 108, 98, 17, 9, 140, 100, 99, 147, 212, 200, 6, 180, 222, 5, 62, 51, 166, 97, 241, 200, 187, 125, 176, 182, 7, 120, 115, 184, 170, 240, 188, 41, 154, 237, 228, 171, 208, 30, 169, 17, 225, 154, 51, 234, 180, 210, 38, 26, 56, 60, 108, 26, 202, 27, 171, 119, 37, 17, 110, 168, 112, 192, 71, 242, 164, 19, 147, 148, 222, 60, 2, 121, 90, 83, 215, 71, 20, 252, 98, 37, 167, 152, 199, 41, 105, 171, 212, 211, 191, 198, 168, 137, 180, 164, 221, 109, 98, 201, 237, 100, 120, 195, 60, 162, 221, 211, 189, 170, 131, 65, 101, 43, 7, 194, 183, 154, 36, 222, 147, 30, 6, 188, 56, 76, 216, 20, 188, 242, 9, 151, 56, 248, 228, 53, 16, 197, 240, 181, 234, 229, 36, 85, 243, 150, 100, 58, 99, 163, 23, 136, 5, 5, 55, 199, 147, 65, 235, 192, 236, 168, 239, 218, 30, 183, 181, 117, 103, 234, 80, 131, 160, 130, 138, 189, 223, 84, 20, 78, 27, 166, 54, 116, 121, 215, 166, 137, 80, 141, 62, 91, 92, 43, 229, 214, 176, 120, 180, 96, 89, 75, 145, 103, 152, 249, 67, 41, 24, 25, 197, 157, 232, 177, 151, 32, 23, 247, 154, 15, 114, 189, 133, 190, 46, 181, 220, 135, 180, 175, 172, 187, 66, 252, 147, 204, 155, 49, 38, 6, 203, 220, 118, 88, 115, 168, 195, 45, 204, 191, 14, 87, 91, 173, 42, 38, 89, 203, 173, 92, 113, 221, 146, 173, 253, 170, 164, 133, 169, 74, 90, 242, 14, 239, 203, 94, 124, 122, 97, 14, 231, 173, 151, 8, 222, 233, 191, 83, 83, 229, 197, 197, 196, 193, 192, 18, 53, 142, 10, 26, 141, 245, 225, 30, 41, 162, 199, 80, 123, 163, 189, 124, 230, 4, 202, 136, 13, 83, 250, 50, 14, 142, 204, 145, 21, 246, 188, 61, 91, 161, 252, 62, 216, 0, 81, 105, 86, 198, 33, 172, 117, 27, 114, 116, 100, 134, 91, 130, 222, 239, 231, 136, 85, 120, 101, 107, 48, 183, 228, 217, 55, 96, 192, 144, 132, 62, 163, 39, 212, 70, 60, 185, 103, 162, 208, 110, 183, 42, 178, 41, 66, 124, 167, 58, 1, 12, 186, 176, 127, 131, 176, 134, 28, 65, 68, 217, 34, 87, 113, 55, 29, 13, 214, 158, 104, 10, 50, 233, 201, 204, 23, 133, 75, 254, 104, 37, 246, 238, 61, 152, 178, 143, 198, 8, 141, 176, 182, 92, 172, 59, 114, 78, 225, 7, 97, 128, 164, 221, 106, 191, 54, 40, 101, 145, 61, 77, 17, 2, 130, 246, 197, 81, 151, 218, 22, 146, 194
        );

        RandomnessTester tester = new RandomnessTester(sequence, 0, 255);

        System.out.println("=== Анализ последовательности ===");

        // Статистические тесты
        System.out.println(STR."Колмогоров-Смирнов (p > 0.05): \{tester.kolmogorovSmirnovTest(0.05) ? "Пройден" : "Не пройден"}");
        System.out.println(STR."Хи-квадрат (8 bins): \{tester.chiSquareTest(8, 0.05) ? "Пройден" : "Не пройден"}");
        System.out.println(STR."Runs-test (Wald–Wolfowitz): \{tester.runsTest(0.05) ? "Пройден" : "Не пройден"}");
        System.out.printf("Автокорреляция (лаг 1): %.4f%n", tester.autocorrelation(1));
        System.out.println(STR."Макс. длина повторений: \{tester.countConsecutiveRepeats()}");

        // Инженерные тесты
        System.out.println(STR."CRC-32: \{Long.toHexString(tester.crc32())}");
        System.out.println(STR."Поиск паттерна [230, 231]: Индекс = \{tester.findPattern(Arrays.asList(230, 231))}");
        System.out.println(STR."Дубликаты (числа с ≥2 вхождениями): \{tester.duplicatePositions()}");
    }

}
